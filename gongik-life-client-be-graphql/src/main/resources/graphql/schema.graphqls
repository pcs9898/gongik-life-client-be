# @authenticate는 사용자가 인증된 경우에만 필드나 객체에 접근할 수 있도록 합니다.
directive @authenticate on FIELD_DEFINITION | OBJECT
directive @range(min: Int!, max: Int!)  on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION


scalar Date

type Query {
    searchInstitutions(searchKeyword: String!, cursor: String, pageSize: Int!): SearchInstitutionsResponse!

    myProfile: MyProfileResponse! @authenticate

    userProfile(userId: ID!): UserProfileResponse!

    institution(institutionId: ID!): InstitutionResponse!

    institutionReview(institutionReviewInput: InstitutionReviewInput!): InstitutionReview!

    institutionReviews(institutionReviewsFilter: InstitutionReviewsFilter!): InstitutionReviewsResponse!

    myInstitutionReviews: MyInstitutionReviewsResponse @authenticate

    institutionReviewsByInstitution(institutionReviewsByInstitutionFilter: InstitutionReviewsByInstitutionFilters!): InstitutionReviewsByInstitutionResponse!

    post(postInput: PostInput!): PostResponse!

    posts(postsFilter: PostsFilter!): PostsResponse!

    comments(commentsInput: CommentsInput!): CommentsResponse!

    myPosts(myPostsFilter: MyPostsFilter!): MyPostsResponse! @authenticate

    userPosts(userPostsFilter: UserPostsFilter!): UserPostsResponse!

    myLikedPosts(myLikedPostsFilter: MyLikedPostsFilter!): MyLikedPostsResponse! @authenticate
}

type Mutation{
    sendEmailVerificationCode(email: String!): Boolean!

    verifyEmailCode(email: String!, code: String!): Boolean!

    signUp(name: String!,email: String!,password: String!,confirmPassword: String!,bio: String,institutionId: String,enlistmentDate: String,dischargeDate: String): SignUpResponse!

    updateProfile(name: String,bio: String,institutionId: String,enlistmentDate: String,dischargeDate: String): UpdateProfileResponse! @authenticate

    createInstitutionReview(createInstitutionReviewInput: CreateInstitutionReviewInput!): InstitutionReview! @authenticate

    deleteInstitutionReview(institutionReviewId: String!): DeleteInstitutionReviewResponse! @authenticate

    likeInstitutionReview(likeInstitutionReviewInput: LikeInstitutionReviewInput!): LikeInstitutionReviewResponse! @authenticate

    unlikeInstitutionReview(unlikeInstitutionReviewInput: UnlikeInstitutionReviewInput!): UnlikeInstitutionReviewResponse! @authenticate

    createPost(createPostInput: CreatePostInput!): CreatePostResponse! @authenticate

    updatePost(updatePostInput: UpdatePostInput!): UpdatePostResponse! @authenticate

    deletePost(deletePostInput: DeletePostInput!): DeletePostResponse! @authenticate

    likePost(likePostInput: LikePostInput!): LikePostResponse! @authenticate

    unLikePost(unLikePostInput: UnLikePostInput!): UnLikePostResponse! @authenticate

    createComment(createCommentInput: CreateCommentInput!): CreateCommentResponse! @authenticate

    updateComment(updateCommentInput: UpdateCommentInput!): UpdateCommentResponse! @authenticate

    deleteComment(deleteCommentInput: DeleteCommentInput!): DeleteCommentResponse! @authenticate
}

"search result"
type SearchInstitutionsResponse {
    listSearchInstitution: [SearchInstitution]
    pageInfo: PageInfo
}

type PageInfo {
    endCursor: String
    hasNextPage: Boolean
}

type SearchInstitution {
    id: ID!
    name: String!
    address: String!
    average_rating: Float
}

type SignUpResponse{
    User: SignUpUser!
    accessToken: String!
    accessTokenExpiresAt: String!
}

type SignUpUser{
    id: ID!
    email: String!
    institution: SignUpInstitution
    name: String!
    bio: String
    enlistmentDate: String
    dischargeDate: String
}

type SignUpInstitution{
    id: ID!
    name: String!
}

type MyProfileResponse{
    id: ID!
    email: String!
    institution: MyProfileInstitution
    name: String!
    bio: String
    enlistmentDate: String
    dischargeDate: String
}

type MyProfileInstitution{
    id: ID!
    name: String!
}

type UserProfileResponse{
    id: ID!
    name: String!
    bio: String
    institution: UserProfileInstitution
    enlistmentDate: String
    dischargeDate: String
}

type UserProfileInstitution{
    id: ID!
    name: String!
}

type UpdateProfileResponse{
    id: ID!
    email: String!
    institution: UpdateProfileInstitution
    name: String!
    bio: String
    enlistmentDate: String
    dischargeDate: String
}

type UpdateProfileInstitution{
    id: ID!
    name: String!
}

type InstitutionResponse{
    id: ID!
    name: String!
    institutionCategoryId: Int!
    address: String!
    phoneNumber: String!
    tagId: Int
    regionalMilitaryOfficeId: Int!
    region: String!
    parentInstitution: String
    sexualCriminalRecordRestriction:Boolean!
    averageWorkhours:Int
    averageRating: Float
    reviewCount: Int!
    diseaseRestrictions: [Int]
}

type InstitutionReview {
    id: ID!
    institution: InstitutionShortInfo!
    user: InstitutionReviewUser!
    rating: Float!
    facilityRating: Int!
    locationRating: Int!
    staffRating: Int!
    visitorRating: Int!
    vacationFreedomRating: Int!
    mainTasks: String!
    prosCons: String!
    averageWorkhours: Int!
    workTypeRulesId: Int!
    uniformWearingRulesId: Int!
    socialServicePeopleCountId: Int!
    likeCount: Int!
    createdAt: String!
    isLiked: Boolean! # its false if user is not authenticated
}

type InstitutionShortInfo{
    institutionId:ID!
    institutionName:String!
}


input CreateInstitutionReviewInput {
    institutionId: ID!
    facilityRating: Int = 0 @range(min: 0, max: 5)
    locationRating: Int = 0 @range(min: 0, max: 5)
    staffRating: Int = 0 @range(min: 0, max: 5)
    visitorRating: Int = 0 @range(min: 0, max: 5)
    vacationFreedomRating: Int = 0 @range(min: 0, max: 5)
    mainTasks: String!
    prosCons: String!
    averageWorkhours: Int = 0 @range(min: 0, max: 480)
    workTypeRulesId: Int = 1 @range(min: 1, max: 6)
    uniformWearingRulesId: Int = 1 @range(min: 1, max: 3)
    socialServicePeopleCountId: Int = 1 @range(min: 1, max: 5)
}

type InstitutionReviewUser{
    id: ID!
    name: String!
}

type DeleteInstitutionReviewResponse{
    institutionReviewId: ID!
    success: Boolean!
}

input LikeInstitutionReviewInput{
    institutionReviewId: ID!
}

type LikeInstitutionReviewResponse{
    success: Boolean!
}

input UnlikeInstitutionReviewInput{
    institutionReviewId: ID!
}

type UnlikeInstitutionReviewResponse{
    success: Boolean!
}

input InstitutionReviewInput{
    institutionReviewId: ID!
}

input InstitutionReviewsFilter{
    institutionCategoryId: Int = 7 @range(min: 1, max: 7)
    cursor: String
    pageSize: Int = 10
}

type InstitutionReviewsResponse {
    listInstitutionReview: [InstitutionReviewForList]!
    pageInfo: PageInfo!
}

type InstitutionReviewForList {
    id: ID!
    institution: InstitutionReviewInstitution
    user: InstitutionReviewUser!
    rating: Float!
    mainTasks: String!
    prosCons: String!
    averageWorkhours: Int!
    likeCount: Int!
    createdAt: String!
    isLiked: Boolean! # its false if user is not authenticated
}

type InstitutionReviewInstitution{
    institutionId: ID!
    institutionName: String!
    institutionCategoryId: Int!
}

type MyInstitutionReviewsResponse{
    listMyInstitutionReview: [InstitutionReviewForList]!

}

input InstitutionReviewsByInstitutionFilters{
    institutionId: ID!
    cursor: String
    pageSize: Int = 10
}

type InstitutionReviewsByInstitutionResponse{
    listInstitutionReviewByInstitution: [InstitutionReviewForList]!
    pageInfo: PageInfo!
}

input CreatePostInput{
    categoryId: Int!=1 @range(min: 1, max: 6)
    title: String!
    content: String!
}

type CreatePostResponse{
    id: ID!
    user: PostUser!
    categoryId: Int!
    title: String!
    content: String!
    likeCount: Int!
    commentCount: Int!
    createdAt:String!
}

type PostUser{
    userId: ID!
    userName: String!
}

input UpdatePostInput{
    postId: ID!
    title: String
    content: String
}

type UpdatePostResponse{
    id: ID!
    user: PostUser!
    categoryId: Int!
    title: String!
    content: String!
    likeCount: Int!
    commentCount: Int!
    createdAt:String!
    isLiked:Boolean!
}

input DeletePostInput{
    postId: ID!
}

type DeletePostResponse{
    postId: ID!
    success: Boolean!
}

input LikePostInput{
    postId: ID!
}

type LikePostResponse{
    success: Boolean!
}

input UnLikePostInput{
    postId: ID!
}

type UnLikePostResponse{
    success: Boolean!
}

input PostInput{
    postId: ID!
}

type PostResponse{
    id: ID!
    user: PostUser!
    categoryId: Int!
    title: String!
    content: String!
    likeCount: Int!
    commentCount: Int!
    createdAt:String!
    isLiked:Boolean!
}

input PostsFilter{
    postCategoryId: Int = 7 @range(min: 1, max: 7)
    cursor: String
    pageSize: Int = 10
}

type PostForList{
    id: ID!
    user: PostUser!
    categoryId: Int!
    title: String!
    content: String!
    likeCount: Int!
    commentCount: Int!
    createdAt:String!
    isLiked:Boolean!
}

type PostsResponse{
    listPost: [PostForList]!
    pageInfo: PageInfo!

}

input CreateCommentInput{
    postId: ID!
    parentCommentId: ID
    content: String!
}

type CreateCommentResponse{
    id: ID!
    user: PostUser!
    postId: ID!
    parentCommentId: ID
    content: String!
    createdAt: String!

}

input UpdateCommentInput{
    commentId: ID!
    content: String!
}

type UpdateCommentResponse{
    id: ID!
    success: Boolean!
}

input DeleteCommentInput{
    commentId: ID!
}

type DeleteCommentResponse{
    commentId: ID!
    success: Boolean!
}

input CommentsInput{
    postId:ID!
}

type CommentForList{
    id: ID!
    user: PostUser
    postId: ID!
    parentCommentId: ID
    content: String
    createdAt: String!
    childComments: [CommentForList]
}

type CommentsResponse{
    listComment: [CommentForList]
}

type Hi{
    hello:String
}

input MyPostsFilter{
    cursor: String
    pageSize: Int = 10
}

type MyPostsResponse{
    listPost: [PostForList]!
    pageInfo: PageInfo!
}

input UserPostsFilter{
    userId: ID!
    cursor: String
    pageSize: Int = 10
}

type UserPostsResponse{
    listPost: [PostForList]!
    pageInfo: PageInfo!
}

input MyLikedPostsFilter{
    cursor: String
    pageSize: Int = 10
}

type MyLikedPostsResponse{
    listPost: [PostForList]!
    pageInfo: PageInfo!
}