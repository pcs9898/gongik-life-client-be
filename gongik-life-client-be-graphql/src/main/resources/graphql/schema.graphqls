# @authenticate는 사용자가 인증된 경우에만 필드나 객체에 접근할 수 있도록 합니다.
directive @authenticate on FIELD_DEFINITION | OBJECT

scalar Date

type Query {
    searchInstitutions(searchKeyword: String!, cursor: String, pageSize: Int!): SearchInstitutionsResponse!

    myProfile: MyProfileResponse! @authenticate

    userProfile(userId: ID!): UserProfileResponse!

    institution(institutionId: ID!): InstitutionResponse!

    institutionReview(id: ID!): InstitutionReview

    myInstitutionReview: [InstitutionReview!]! @authenticate

    institutionReviews: [InstitutionReview!]!



}

type Mutation{
    sendEmailVerificationCode(email: String!): Boolean!

    verifyEmailCode(email: String!, code: String!): Boolean!

    signUp(name: String!,email: String!,password: String!,confirmPassword: String!,bio: String,institutionId: String,enlistmentDate: String,dischargeDate: String): SignUpResponse!

    updateProfile(name: String,bio: String,institutionId: String,enlistmentDate: String,dischargeDate: String): UpdateProfileResponse! @authenticate

    createInstitutionReview(createInstitutionReviewInput: CreateInstitutionReviewInput!): InstitutionReview! @authenticate

    deleteInstitutionReview(institutionReviewId: String!): DeleteInstitutionReviewResponse! @authenticate
}

type SearchInstitutionsResponse {
    listSearchInstitution: [SearchInstitution]
    pageInfo: PageInfo
}

type PageInfo {
    endCursor: String
    hasNextPage: Boolean
}

type SearchInstitution {
    id: ID!
    name: String!
    address: String!
    average_rating: Float
}

type SignUpResponse{
    User: SignUpUser!
    accessToken: String!
    accessTokenExpiresAt: String!
}

type SignUpUser{
    id: ID!
    email: String!
    institution: SignUpInstitution
    name: String!
    bio: String
    enlistmentDate: String
    dischargeDate: String
}

type SignUpInstitution{
    id: ID!
    name: String!
}

type MyProfileResponse{
    id: ID!
    email: String!
    institution: MyProfileInstitution
    name: String!
    bio: String
    enlistmentDate: String
    dischargeDate: String
}

type MyProfileInstitution{
    id: ID!
    name: String!
}

type UserProfileResponse{
    id: ID!
    name: String!
    bio: String
    institution: UserProfileInstitution
    enlistmentDate: String
    dischargeDate: String
}

type UserProfileInstitution{
    id: ID!
    name: String!
}

type UpdateProfileResponse{
    id: ID!
    email: String!
    institution: UpdateProfileInstitution
    name: String!
    bio: String
    enlistmentDate: String
    dischargeDate: String
}

type UpdateProfileInstitution{
    id: ID!
    name: String!
}

type InstitutionResponse{
    id: ID!
    name: String!
    institutionCategoryId: Int!
    address: String!
    phoneNumber: String!
    tagId: Int
    regionalMilitaryOfficeId: Int!
    region: String!
    parentInstitution: String
    sexualCriminalRecordRestriction:Boolean!
    averageWorkhours:Int
    averageRating: Float
    reviewCount: Int!
    diseaseRestrictions: [Int]
}

type InstitutionReview {
    id: ID!
    institutionId: ID!
    user: InstitutionReviewUser!
    rating: Float!
    facilityRating: Int!
    locationRating: Int!
    staffRating: Int!
    visitorRating: Int!
    vacationFreedomRating: Int!
    mainTasks: String!
    prosCons: String!
    averageWorkhours: Int!
    workTypeRulesId: Int!
    uniformWearingRulesId: Int!
    socialServicePeopleCountId: Int!
    likeCount: Int!
    createdAt: String!
}

input CreateInstitutionReviewInput {
    institutionId: ID!
    facilityRating: Int!
    locationRating: Int!
    staffRating: Int!
    visitorRating: Int!
    vacationFreedomRating: Int!
    mainTasks: String!
    prosCons: String!
    averageWorkhours: Int!
    workTypeRulesId: Int!
    uniformWearingRulesId: Int!
    socialServicePeopleCountId: Int!
}

type InstitutionReviewUser{
    id: ID!
    name: String!
}

type DeleteInstitutionReviewResponse{
    institutionReviewId: ID!
    success: Boolean!
}