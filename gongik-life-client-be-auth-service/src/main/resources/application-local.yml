server:
  port: 8003

grpc:
  server:
    port: 9003
  client:
    gongik-life-client-be-user-service:
      address: 'discovery:///gongik-life-client-be-user-service'
      enableKeepAlive: true
      keepAliveWithoutCalls: true
      negotiationType: plaintext


spring:
  application:
    name: gongik-life-client-be-auth-service

  data:
    redis:
      port: 6379
      host: ${REMOTE_ADDRESS:192.168.0.50}

  kafka:
    bootstrap-servers: ${REMOTE_ADDRESS:192.168.0.50}:9092
    consumer:
      group-id: gongik-life-client-be-auth-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8000/eureka/
    registerWithEureka: true
    fetchRegistry: true

jwt:
  secret: 1ad35d74dc65cc0ee9a3a409f7f87e332aa6aa89d9cc64c66cdf9a1ffdc534ee
  access-token-validity: 1800000
  refresh-token-validity: 1209600000



management:
  tracing:
    sampling:
      probability: 1.0
    propagation:
      consume: b3
      produce: b3_multi
  zipkin:
    tracing:
      endpoint: "http://${REMOTE_ADDRESS:192.168.0.50}:9411/api/v2/spans"
  endpoints:
    web:
      exposure:
        include:
          - info
          - health
          - loggers
          - mappings
          - metrics
          - shutdown
          - prometheus

logging:
  pattern:
    level: "%5p [%X{traceId:-},%X{spanId:-}]"
