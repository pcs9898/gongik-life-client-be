server:
  port: 8008

grpc:
  server:
    port: 9008

spring:
  application:
    name: gongik-life-client-be-notification-service

  datasource:
    url: jdbc:postgresql://192.168.0.24:5432/gongik_life_client_notification_db
    driverClassName: org.postgresql.Driver
    username: postgres
    password: postgres

  jpa:
    defer-datasource-initialization: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true

  data:
    redis:
      host: 192.168.0.24
      port: 6379
      client-type: lettuce

  kafka:
    bootstrap-servers: 192.168.0.24:9092
    consumer:
      group-id: gongik-life-client-be-notification-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

#grpc:
#  client:
#    gongik-life-client-be-auth-service:
#      address: 'discovery:///gongik-life-client-be-auth-service'
#      enableKeepAlive: true
#      keepAliveWithoutCalls: true
#      negotiationType: plaintext
#
##TODO client들 추가하기

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8000/eureka/
    registerWithEureka: true
    fetchRegistry: true

management:
  tracing:
    sampling:
      probability: 1.0
    propagation:
      consume: b3
      produce: b3_multi
  zipkin:
    tracing:
      endpoint: "http://192.168.0.24:9411/api/v2/spans"
  endpoints:
    web:
      exposure:
        include:
          - info
          - health
          - loggers
          - mappings
          - metrics
          - shutdown
          - prometheus

logging:
  pattern:
    level: "%5p [%X{traceId:-},%X{spanId:-}]"
