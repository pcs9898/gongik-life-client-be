spring:
  application:
    name: gongik-life-client-be-gateway
  data:
    redis:
      port: 6379
      host: gongik-life-redis
  cloud:
    gateway:
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials
      routes:
        - id: auth_route
          uri: lb://gongik-life-client-be-auth-service
          predicates:
            - Path=/api/auth/**
            - Method=POST,GET,OPTIONS
          filters:
            - PreserveHostHeader
            - DedupeResponseHeader=Access-Control-Allow-Origin
            - DedupeResponseHeader=Set-Cookie
            - name: CircuitBreaker
              args:
                name: authCircuitBreaker
                fallbackUri: forward:/fallback/authFailure
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 1
                redis-rate-limiter.burstCapacity: 5
                key-resolver: "#{@ipKeyResolver}"

        - id: graphql_route
          uri: lb://gongik-life-client-be-graphql
          predicates:
            - Path=/graphql
            - Method=POST,GET,OPTIONS
          filters:
            - AuthenticationFilter
            - PreserveHostHeader
            - DedupeResponseHeader=Access-Control-Allow-Origin
            - DedupeResponseHeader=Set-Cookie
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 1
                redis-rate-limiter.burstCapacity: 5
                key-resolver: "#{@ipKeyResolver}"

        - id: graphql_subscription_route
          uri: lb:ws://gongik-life-client-be-graphql
          predicates:
            - Path=/graphql
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 1
                redis-rate-limiter.burstCapacity: 5
                key-resolver: "#{@ipKeyResolver}"


        - id: graphiql_route
          uri: lb://gongik-life-client-be-graphql
          predicates:
            - Path=/graphiql
            - Method=POST,GET,OPTIONS
          filters:
            - AuthenticationFilter
            - PreserveHostHeader
            - DedupeResponseHeader=Access-Control-Allow-Origin
            - DedupeResponseHeader=Set-Cookie
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 1
                redis-rate-limiter.burstCapacity: 5
                key-resolver: "#{@ipKeyResolver}"


          # Swagger 등에는 별도의 Rate Limiter 미적용 설정
        - id: auth_swagger_route
          uri: lb://gongik-life-client-be-auth-service
          predicates:
            - Path=/swagger-ui/**, /v3/api-docs/**, /swagger-resources/**, /webjars/**
            - Method=POST,GET,OPTIONS
          filters:
            - PreserveHostHeader
            - DedupeResponseHeader=Access-Control-Allow-Origin
            - DedupeResponseHeader=Set-Cookie


      #         - id: auth_route
      #          uri: lb://gongik-life-client-be-auth-service
      #          predicates:
      #            - Path=/api/auth/**
      #            - Method=POST,GET,OPTIONS
      #          filters:
      #            - PreserveHostHeader
      #            - DedupeResponseHeader=Access-Control-Allow-Origin
      #            - DedupeResponseHeader=Set-Cookie
      #            - name: CircuitBreaker
      #              args:
      #                name: authCircuitBreaker
      #                fallbackUri: forward:/fallback/authFailure
      #
      #        - id: auth_swagger_route
      #          uri: lb://gongik-life-client-be-auth-service
      #          predicates:
      #            - Path=/swagger-ui/**, /v3/api-docs/**, /swagger-resources/**, /webjars/**
      #            - Method=POST,GET,OPTIONS
      #          filters:
      #            - PreserveHostHeader
      #            - DedupeResponseHeader=Access-Control-Allow-Origin
      #            - DedupeResponseHeader=Set-Cookie
      #
      #        - id: graphql_route
      #          uri: lb://gongik-life-client-be-graphql
      #          predicates:
      #            - Path=/graphql
      #            - Method=POST,GET,OPTIONS
      #          filters:
      #            - AuthenticationFilter
      #            - PreserveHostHeader
      #            - DedupeResponseHeader=Access-Control-Allow-Origin
      #            - DedupeResponseHeader=Set-Cookie
      #
      #        - id: graphql_subscription_route
      #          uri: lb:ws://gongik-life-client-be-graphql
      #          predicates:
      #            - Path=/graphql
      #          filters:
      #
      #        - id: graphiql_route
      #          uri: lb://gongik-life-client-be-graphql
      #          predicates:
      #            - Path=/graphiql
      #            - Method=POST,GET,OPTIONS
      #          filters:
      #            - AuthenticationFilter
      #            - PreserveHostHeader
      #            - DedupeResponseHeader=Access-Control-Allow-Origin
      #            - DedupeResponseHeader=Set-Cookie




      global-cors:
        cors-configurations:
          '[/**]':
            allowedOrigins:
              - "http://localhost:9999"
              - "https://clientbe.gongik.shop/"
              - "http://clientbe.gongik.shop/"
            allowedMethods:
              - OPTIONS
              - POST
              - GET
              - PATCH
            allowedHeaders: "*"
            allowCredentials: true
            exposedHeaders:
              - Set-Cookie



#      default-filters:
#        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials
#        - name: RequestRateLimiter
#          args:
#            redis-rate-limiter.replenishRate: 1 # replenishRate는 사용자가 일정 시간 동안(보통 초 단위) 발생시킬 수 있는 요청의 수를 정의
#            redis-rate-limiter.burstCapacity: 5 # burstCapacity는 토큰 버킷이 담을 수 있는 최대 토큰의 수를 정의
#            key-resolver: "#{@ipKeyResolver}"
eureka:
  client:
    service-url:
      defaultZone: http://gongik-life-client-be-discovery:8000/eureka/
    registerWithEureka: true
    fetchRegistry: true

    rest-template-timeout:
      connect-timeout: 5000
      connect-request-timeout: 8000
      socket-timeout: 10000

logging:
  level:
    org.springframework.cloud.gateway: TRACE
    org.springframework.http.server.reactive: DEBUG
    org.springframework.web.reactive: DEBUG
    reactor.ipc.netty: DEBUG
    reactor.netty: DEBUG
    io.github.resilience4j: DEBUG


resilience4j:
  circuitbreaker:
    instances:
      authCircuitBreaker:
        registerHealthIndicator: true
        slidingWindowSize: 5 # 서킷 브레이커가 고려할 최근 호출 수
        minimumNumberOfCalls: 10 # 최소 호출 횟수, 이 수를 넘어야 서킷 브레이커의 상태가 변경됨
        permittedNumberOfCallsInHalfOpenState: 10 # 반-열린 상태에서 허용되는 호출 수
        automaticTransitionFromOpenToHalfOpenEnabled: true # 서킷 브레이커가 자동으로 반-열린 상태로 전환되는지 여부
        waitDurationInOpenState: 5000 # 서킷 브레이커가 열린 상태로 유지되는 시간
        failureRateThreshold: 50 # 실패율 기준, 이 비율을 초과하는 실패가 발생하면 서킷 브레이커가 열립니다
        eventConsumerBufferSize: 10
        record-exceptions:
          - java.util.concurrent.TimeoutException
          - org.springframework.cloud.gateway.support.NotFoundException
          - io.github.resilience4j.circuitbreaker.CallNotPermittedException
#        ignoreExceptions: # 서킷 브레이커가 무시할 예외 유형
#          - org.springframework.web.client.HttpClientErrorException

resilience4j.timelimiter:
  configs:
    default:
      timeoutDuration: 5s

management:
  tracing:
    sampling:
      probability: 1.0
    propagation:
      consume: b3
      produce: b3_multi
  zipkin:
    tracing:
      endpoint: "http://gongik-life-client-be-zipkin:9411/api/v2/spans"
  endpoints:
    web:
      exposure:
        include:
          - info
          - health
          - loggers
          - mappings
          - metrics
          - shutdown
          - prometheus
          - circuitbreakers
